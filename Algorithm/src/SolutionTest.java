import org.junit.Test;

import struct.TreeNode;

public class SolutionTest {
    private Solution solution = new Solution();
    private Case testCase = new Case();

    @Test
    public void test() {
        int[][] matrix = testCase.createMatrix("[[0,0],[1,1],[1,0],[2,0]]");
        int[] result = solution.bestLine(matrix);
        testCase.matchArray(result, new int[]{0, 2});

        matrix = testCase.createMatrix("[[23064,-1044],[0,22969],[17805,40898],[29725,-1778],[-32070,-2148],[-19027,-2055],[-679,-41065],[12043,-16880],[21838,13404],[22690,-6475],[21585,-19101],[7577,-14359],[-20014,-40714],[20942,-19286],[12648,21299],[-36169,-11846],[3595,-19224],[27974,26651],[25899,12871],[-13881,-24276],[16833,-19449],[-13881,5948],[-48591,29692],[17406,-39601],[24765,7305],[-41894,-12128],[13645,-12514],[17119,-45877],[27715,-3120],[10537,-33802],[-36719,-39521],[3328,-16834],[25332,10088],[-23069,-31890],[4192,28773],[20987,-7179],[29525,-25688],[-5450,-25263],[-14571,-26940],[-31236,17820],[-2435,-23250],[28720,-2449],[5905,7021],[-48683,-2355],[-64140,-27265],[20829,-17796],[21104,13825],[-30954,-26421]]");
        result = solution.bestLine(matrix);
        testCase.matchArray(result, new int[]{3, 9});

        matrix = testCase.createMatrix("[[-24272,-29606],[-37644,-4251],[2691,-22513],[-14592,-33765],[-21858,28550],[-22264,41303],[-6960,12785],[-39133,-41833],[25151,-26643],[-19416,28550],[-17420,22270],[-8793,16457],[-4303,-25680],[-14405,26607],[-49083,-26336],[22629,20544],[-23939,-25038],[-40441,-26962],[-29484,-30503],[-32927,-18287],[-13312,-22513],[15026,12965],[-16361,-23282],[7296,-15750],[-11690,-21723],[-34850,-25928],[-14933,-16169],[23459,-9358],[-45719,-13202],[-26868,28550],[4627,16457],[-7296,-27760],[-32230,8174],[-28233,-8627],[-26520,28550],[5515,-26001],[-16766,28550],[21888,-3740],[1251,28550],[15333,-26322],[-27677,-19790],[20311,7075],[-10751,16457],[-47762,-44638],[20991,24942],[-19056,-11105],[-26639,28550],[-19862,16457],[-27506,-4251],[-20172,-5440],[-33757,-24717],[-9411,-17379],[12493,29906],[0,-21755],[-36885,-16192],[-38195,-40088],[-40079,7667],[-29294,-34032],[-55968,23947],[-22724,-22513],[20362,-11530],[-11817,-23957],[-33742,5259],[-10350,-4251],[-11690,-22513],[-20241,-22513]]");
        result = solution.bestLine(matrix);
        testCase.matchArray(result, new int[]{4, 9});

        matrix = testCase.createMatrix("[[7992,-18313],[-10573,-31818],[8499,-11806],[-48723,31818],[-52831,-19716],[9037,-31558],[-25098,-15352],[2603,-32737],[-29648,0],[-19349,10382],[-58704,-6960],[30052,-20287],[19619,-2656],[-58704,-19478],[-19303,27902],[13531,6128],[-58704,-1486],[-33792,-29361],[-58704,-19201],[-58704,-4099],[-50629,2118],[-58704,6509],[-8027,-38938],[-58704,-24435],[-24278,-20995],[-592,24435],[-54425,52082],[-16394,-17262],[-36236,-21798],[-31024,-31850],[1561,-3228],[-16280,-20998],[27531,-31532],[-41059,-30190],[-34349,-31296],[-39446,-18587],[-2882,159],[-21897,-25637],[-33016,-32722],[-42239,-15914],[29077,-31210]]");
        result = solution.bestLine(matrix);
        testCase.matchArray(result, new int[]{10, 13});
    }
} 
